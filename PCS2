def passwordHandler(String input) {
    StringBuilder result = new StringBuilder()
    for (int i = 0; i < input.length(); i++) {
        if (input.charAt(i) == '%') {
            result.append('%')
        }
        result.append(input.charAt(i))
    }
    return result.toString()
}

def Update_details(instance_selected) {
    if (instance_selected.equals("DEV")) {
        env.USR = env.DEV_Creds_USR
        env.PSW = env.DEV_Creds_PSW
        env.serviceURL = env.DEV_URL
    }
}

pipeline {
    agent any

    environment {
        DEV_Creds = credentials('DEV_CredID')
    }

    stages {
        stage('Import Process Application') {
            steps {
                script {
                    Update_details((params.InstanceURL).toString())
                    //echo "${env.serviceURL}"
                    bat """
                        curl --location "${env.serviceURL}/ic/api/process/v1/targets/ORACLEINTERNALPCS" \
                        --header "Accept: application/json" \
                        --user ${env.USR}:${passwordHandler(env.PSW)} \
                        --form "restDeployConfig={\\\"revisionId\\\": \\\"${params.Application_Version}\\\"}" \
                        --form "exp=@\\\"${params.Application_File}\\\""
                    """
                }
            }
        }

        stage('Deactivate Previous Application') {
            steps {
                script {
					if (params.Deactivate_Application) {
                        // Perform action when the checkbox is checked
						echo 'Checkbox is checked'
						withCredentials([usernamePassword(credentialsId: 'DEV_CredID', passwordVariable: 'PSW', usernameVariable: 'USR')]) {
							def deployIntegCmd = "curl -X PATCH \"${env.serviceURL}/ic/api/process/v1/targets/ORACLEINTERNALPCS/projects/${params.Application_ID}/revisions/${params.Deactivate_Application_Version}\" --user \"${USR}:${passwordHandler(PSW)}\" --header \"Content-Type: application/json\" --data \"{\\\"state\\\": \\\"OFF\\\", \\\"mode\\\": \\\"RETIRED\\\"}\""
							bat(deployIntegCmd)
							echo "Application deactivated"
						}
					}
				}
			}
        }
		stage('Undeploy an application') {
			steps {
				script {
					if (params.Undeploy_Application) {
						withCredentials([usernamePassword(credentialsId: 'DEV_CredID', passwordVariable: 'PSW', usernameVariable: 'Username')]) {
							def undeployApp = "curl --location --request DELETE \"${params.Instance_URL}/ic/api/process/v1/targets/ORACLEINTERNALPCS/projects/${params.Application_Name}/revisions/${params.Undeploy_Version}\" --user \"${USR}:${passwordHandler(PSW)}\" --header \"Accept: application/json\""
							bat(undeployApp)
						}
					}
				}
			}
		}
    }
}
